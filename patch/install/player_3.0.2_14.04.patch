diff -ruN player-3.0.2-orig/client_libs/libplayerc++/CMakeLists.txt player-3.0.2/client_libs/libplayerc++/CMakeLists.txt
--- player-3.0.2-orig/client_libs/libplayerc++/CMakeLists.txt	2009-08-04 00:48:04.000000000 -0300
+++ player-3.0.2/client_libs/libplayerc++/CMakeLists.txt	2016-07-13 18:09:45.696662707 -0300
@@ -24,24 +24,34 @@
     # Look for Boost libraries
     IF (BUILD_PLAYERCC_BOOST)
         # There is a new, much better, FindBoost.cmake in 2.6
-        IF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 6)
+        IF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION GREATER 6)
             OPTION (Boost_USE_STATIC_LIBS "Use the static versions of the Boost libraries" OFF)
             MARK_AS_ADVANCED (Boost_USE_STATIC_LIBS)
             OPTION (USE_BOOST_THREAD "Use the Boost threading library" ON)
             MARK_AS_ADVANCED (USE_BOOST_THREAD)
             OPTION (USE_BOOST_SIGNALS "Use the Boost signalling library" ON)
             MARK_AS_ADVANCED (USE_BOOST_SIGNALS)
+            OPTION (USE_BOOST_SYSTEM "Use the Boost system library" ON)
+            MARK_AS_ADVANCED (USE_BOOST_SYSTEM)
 
             IF (USE_BOOST_THREAD)
                 SET (BOOST_COMPONENTS thread)
             ELSE (USE_BOOST_THREAD)
                 SET (HAVE_BOOST_THREAD FALSE CACHE INTERNAL "Is the Boost::Thread library present")
             ENDIF (USE_BOOST_THREAD)
+
             IF (USE_BOOST_SIGNALS)
                 SET (BOOST_COMPONENTS ${BOOST_COMPONENTS} signals)
             ELSE (USE_BOOST_SIGNALS)
                 SET (HAVE_BOOST_SIGNALS FALSE CACHE INTERNAL "Is the Boost::Signals library present")
             ENDIF (USE_BOOST_SIGNALS)
+
+            IF (USE_BOOST_SYSTEM)
+                SET (BOOST_COMPONENTS ${BOOST_COMPONENTS} system)
+            ELSE (USE_BOOST_SYSTEM)
+                SET (HAVE_BOOST_SYSTEM FALSE CACHE INTERNAL "Is the Boost::System library present")
+            ENDIF (USE_BOOST_SYSTEM)
+
             FIND_PACKAGE (Boost COMPONENTS ${BOOST_COMPONENTS})
             IF (Boost_FOUND)
                 PLAYERCC_ADD_INCLUDE_DIR (${Boost_INCLUDE_DIR})
@@ -73,12 +83,25 @@
                     MESSAGE (STATUS
                             "Boost::Signals library not found, support will not be included.")
                 ENDIF (Boost_SIGNALS_FOUND)
+
+                IF (Boost_SYSTEM_FOUND)
+                    GET_FILENAME_COMPONENT (boostSystemLib ${Boost_SYSTEM_LIBRARY} NAME_WE CACHE)
+                    STRING (REGEX REPLACE "^lib" "" boostSystemLib ${boostSystemLib})
+                    PLAYERCC_ADD_LINK_LIB (${boostSystemLib})
+                    SET (boostIncludeDir ${Boost_INCLUDE_DIR})
+                    SET (HAVE_BOOST_SYSTEM TRUE CACHE INTERNAL "Is the Boost::System library present")
+                    MESSAGE (STATUS
+                            "PlayerC++ client library will be built with Boost::System support.")
+                ELSE (Boost_SYSTEM_FOUND)
+                    MESSAGE (STATUS
+                            "Boost::System library not found, support will not be included.")
+                ENDIF (Boost_SYSTEM_FOUND)                
             ELSE (Boost_FOUND)
                 MESSAGE (STATUS
-                         "Boost libraries were not found. Boost::Signals and Boost::Thread support
+                         "Boost libraries were not found. Boost::Signals and Boost::Thread Boost::System support
                          will not be included in PlayerC++.")
             ENDIF (Boost_FOUND)
-        ELSE (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 6)
+        ELSE (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION GREATER 6)
             FIND_PACKAGE (Boost)
             IF (Boost_FOUND)
                 # For 2.4, assume that if boost is found then both signals and threads are present
@@ -141,15 +164,40 @@
                              "PlayerC++ client library Boost::Signals support disabled -
                              Boost::Signals library not found.")
                 ENDIF (HAVE_BOOST_SIGNALS)
+
+                SET (HAVE_BOOST_SYSTEM TRUE CACHE INTERNAL "Is the Boost::System library present")
+                IF (HAVE_BOOST_SYSTEM)
+                    OPTION (USE_BOOST_SYSTEM "Use the Boost system library" ON)
+                    MARK_AS_ADVANCED (USE_BOOST_SYSTEM)
+                    IF (USE_BOOST_SYSTEM)
+                        MESSAGE (STATUS
+                             "PlayerC++ client library will be built with Boost::System support.")
+                        SET (boostSystemLib boost_system${BOOST_LIB_SUFFIX})
+                        PLAYERCC_ADD_LINK_LIB (${boostSystemLib})
+                        PLAYERCC_ADD_INCLUDE_DIR (${Boost_INCLUDE_DIR})
+                        PLAYERCC_ADD_LINK_DIR (${Boost_LIBRARY_DIRS})
+                        SET (boostIncludeDir ${Boost_INCLUDE_DIRS})
+                    ELSE (USE_BOOST_SYSTEM)
+                        SET (HAVE_BOOST_SYSTEM FALSE)
+                        MESSAGE (STATUS
+                                 "PlayerC++ client library Boost::System support disabled by
+                                 user.")
+                    ENDIF (USE_BOOST_SYSTEM)
+                ELSE (HAVE_BOOST_SYSTEM)
+                    MESSAGE (STATUS
+                             "PlayerC++ client library Boost::System support disabled -
+                             Boost::System library not found.")
+                ENDIF (HAVE_BOOST_SYSTEM)
+
             ELSE (Boost_FOUND)
                 MESSAGE (STATUS
-                         "Boost libraries were not found. Boost::Signals and Boost::Thread support
+                         "Boost libraries were not found. Boost::Signals, Boost::Thread, and Boost::System support
                          will not be included in PlayerC++.")
             ENDIF (Boost_FOUND)
-        ENDIF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 6)
+        ENDIF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION GREATER 6)
     ELSE (BUILD_PLAYERCC_BOOST)
         MESSAGE (STATUS
-                 "Boost support disabled. Boost::Signals and Boost::Thread support will not be
+                 "Boost support disabled. Boost::Signals and Boost::Thread Boost::System support will not be
                  included in PlayerC++.")
     ENDIF (BUILD_PLAYERCC_BOOST)
 
diff -ruN player-3.0.2-orig/client_libs/libplayerc++/playerc++config.h.in player-3.0.2/client_libs/libplayerc++/playerc++config.h.in
--- player-3.0.2-orig/client_libs/libplayerc++/playerc++config.h.in	2009-04-08 05:20:15.000000000 -0300
+++ player-3.0.2/client_libs/libplayerc++/playerc++config.h.in	2016-07-13 17:51:48.912649974 -0300
@@ -3,6 +3,10 @@
 
 #cmakedefine HAVE_BOOST_THREAD 1
 #cmakedefine HAVE_BOOST_SIGNALS 1
+// remove annoying warning
+// warning: #warning "Boost.Signals is no longer being maintained and is now deprecated. Please switch to Boost.Signals2. To disable  
+// this warning message, define BOOST_SIGNALS_NO_DEPRECATION_WARNING
+#define BOOST_SIGNALS_NO_DEPRECATION_WARNING
 
 #if defined (HAVE_BOOST_THREAD)
 #define _POSIX_PTHREAD_SEMANTICS
diff -ruN player-3.0.2-orig/client_libs/libplayerc++/playerclient.cc player-3.0.2/client_libs/libplayerc++/playerclient.cc
--- player-3.0.2-orig/client_libs/libplayerc++/playerclient.cc	2009-02-18 00:53:04.000000000 -0300
+++ player-3.0.2/client_libs/libplayerc++/playerclient.cc	2016-07-12 16:52:28.652173574 -0300
@@ -168,7 +168,7 @@
       Read();
     };
     boost::xtime xt;
-    boost::xtime_get(&xt, boost::TIME_UTC);
+    boost::xtime_get(&xt, boost::TIME_UTC_);
     // we sleep for 0 seconds
     boost::thread::sleep(xt);
   }
@@ -229,6 +229,8 @@ void PlayerClient::ReadIfWaiting()
 
 void PlayerClient::Read()
 {
+       try{
+               
   assert(NULL!=mClient);
   PRINT("read()");
   // first read the data
@@ -247,6 +249,14 @@ void PlayerClient::Read()
   std::for_each(mProxyList.begin(),
                 mProxyList.end(),
                 std::mem_fun(&ClientProxy::ReadSignal));
+    // this avoids the client from crashing when Player is closed.            
+       }catch (PlayerCc::PlayerError e){
+               #ifndef NDEBUG
+                       std::cerr << e << std::endl;
+               #endif
+               std::cerr << "Could not connect to Player. Closing application ... " << std::endl;
+               exit(1);
+       }                
 }
 
 void PlayerClient::RequestDeviceList()
diff -ruN player-3.0.2-orig/cmake/internal/SearchForStuff.cmake player-3.0.2/cmake/internal/SearchForStuff.cmake
--- player-3.0.2-orig/cmake/internal/SearchForStuff.cmake	2009-08-11 00:44:43.000000000 -0300
+++ player-3.0.2/cmake/internal/SearchForStuff.cmake	2016-07-12 16:52:28.652173574 -0300
@@ -35,15 +35,15 @@
 ENDIF (HAVE_XDR)
 SET (CMAKE_REQUIRED_LIBRARIES)
 
-IF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 6)
+IF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION GREATER 6)
     INCLUDE (CheckStructHasMember)
     CHECK_STRUCT_HAS_MEMBER ("struct timespec" tv_sec time.h HAVE_STRUCT_TIMESPEC)
-ELSE (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 6)
+ELSE (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION GREATER 6)
     INCLUDE (CheckCSourceCompiles)
     SET (CHECK_TIMESPEC_SOURCE_CODE "#include <time.h>
 int main () { struct timespec *tmp; return 0; }")
     CHECK_C_SOURCE_COMPILES ("${CHECK_TIMESPEC_SOURCE_CODE}" HAVE_STRUCT_TIMESPEC)
-ENDIF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION EQUAL 6)
+ENDIF (CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION GREATER 6)
 
 CHECK_FUNCTION_EXISTS (gettimeofday HAVE_GETTIMEOFDAY)
 CHECK_FUNCTION_EXISTS (usleep HAVE_USLEEP)
diff -ruN player-3.0.2-orig/server/CMakeLists.txt player-3.0.2/server/CMakeLists.txt
--- player-3.0.2-orig/server/CMakeLists.txt	2009-12-15 22:51:26.000000000 -0200
+++ player-3.0.2/server/CMakeLists.txt	2016-07-12 16:52:28.652173574 -0300
@@ -36,7 +36,7 @@
 ADD_EXECUTABLE (player ${playerSrcs})
 TARGET_LINK_LIBRARIES (player playerdrivers playercore playercommon playertcp
                        playerudp playerinterface playerwkb ${playerreplaceLib}
-                       ${PLAYERCORE_EXTRA_LINK_LIBRARIES})
+                       ${PLAYERCORE_EXTRA_LINK_LIBRARIES} pq)
 IF (INCLUDE_RTKGUI)
     TARGET_LINK_LIBRARIES (player rtk)
 ENDIF (INCLUDE_RTKGUI)
diff -ruN player-3.0.2-orig/server/drivers/shell/readlog.cc player-3.0.2/server/drivers/shell/readlog.cc
--- player-3.0.2-orig/server/drivers/shell/readlog.cc	2009-12-15 22:51:26.000000000 -0200
+++ player-3.0.2/server/drivers/shell/readlog.cc	2016-07-12 16:52:28.652173574 -0300
@@ -665,7 +665,7 @@
       // back up to the beginning of the file
 #if HAVE_Z
       if (this->gzfile)
-        ret = gzseek(this->file,0,SEEK_SET);
+        ret = gzseek(this->gzfile,0,SEEK_SET);
       else
         ret = fseek(this->file,0,SEEK_SET);
 #else
@@ -711,7 +711,7 @@
       // compared to fgets (on uncompressed files), so use the latter.
 #if HAVE_Z
       if (this->gzfile)
-        ret = (gzgets(this->file, this->line, this->line_size) == NULL);
+        ret = (gzgets(this->gzfile, this->line, this->line_size) == NULL);
       else
         ret = (fgets(this->line, this->line_size, (FILE*) this->file) == NULL);
 #else
